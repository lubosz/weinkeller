#!/usr/bin/python

import subprocess, os
from weinkeller_lib import commands
import sys
import fnmatch

def get_env(bottle_dir):
    wine_env = os.environ.copy()
    wine_env["WINEPREFIX"] = bottle_dir
    wine_env["WINEARCH"] = "win32"
    return wine_env


def call(command):
    print("calling", command)
    subprocess.Popen(command)


def call_wine(command, bottle_dir):
    print("calling", command)
    subprocess.call(command, shell=True, env=get_env(bottle_dir))


def sandbox(bottle_dir):
    call_wine("winetricks sandbox", bottle_dir)


def cfg(bottle_dir):
    call_wine("winecfg", bottle_dir)


def print_usage():
    print("Usage: weinkeller prefixname command")
    print("Try: weinkeller command help")
    print_help()


def print_help():
    print("Commands: install export import launch delete list")
    sys.exit(0)


def find_files(file_name, folder):
    matches = []
    for root, dir_names, file_names in os.walk(folder):
        for filename in fnmatch.filter(file_names, file_name):
            matches.append(os.path.join(root, filename))

    return matches

import hashlib


def sha256(file_name):
    return hashlib.sha256(open(file_name, 'rb').read()).hexdigest()[:16]


def spacey(name, spaces):
    spaces -= len(name)
    space = ""
    for i in range(1, spaces):
        space += " "
    return name + space


def patch(bottle_dir):
    try:
        patches = sys.argv[3:]
    except IndexError:
        print("You need to supply a patched file to look for.")
        sys.exit(0)

    for patch_name in patches:
        full_path = os.path.join(os.getcwd(), patch_name)
        files = find_files(patch_name, bottle_dir + "/drive_c/")
        if files:
            print(spacey(patch_name, 30),
                  sha256(full_path), "=>",
                  sha256(files[0]),
                  files[0].replace(bottle_dir, ""))
            call(["cp", full_path, files[0]])


def delete(bottle_dir):
    call(["rm", bottle_dir, "-Rf"])


def install(bottle_dir):
    try:
        file_name = sys.argv[3]
    except IndexError:
        print("You need to supply an install file.")
        sys.exit(0)

    full_path = os.path.join(os.getcwd(), file_name)

    if file_name[0] == '/':
        full_path = file_name

    if not os.path.exists(full_path):
        print(full_path, "does not exist")

    file_name = file_name.split("/")[-1]

    if ".exe" in file_name:
        print("Exe file")

        folder = full_path.replace(file_name, "")

        folder_device_path = os.path.join(bottle_dir + "/dosdevices/z:")

        print("Creating symlink into sandbox:", folder_device_path)
        if os.path.exists(folder_device_path):
            call(["rm", folder_device_path])
        call(["ln", "-s", folder, folder_device_path])

        wine_command = "wine 'Z:\%s'" % file_name
        call_wine(wine_command, bottle_dir)
    elif ".iso" in file_name:
        print("iso file")
        #call(["sudo", "mount", file_name, "/mnt/cdrom"])

        subprocess.call(["sudo umount /mnt/cdrom"], shell=True)
        subprocess.call(["sudo mount " + file_name + " /mnt/cdrom -o loop"], shell=True)

        if os.path.exists("/mnt/cdrom/Setup.exe"):
            call_wine("wine 'D:\Setup.exe'", bottle_dir)
        else:
            print("Please provide Setup.exe")
            call(["ls", "/mnt/cdrom"])

    elif ".msi" in file_name:
        call_wine("msiexec -i %s" % file_name, bottle_dir)
    elif ".bin" in file_name or ".cue" in file_name:
        print("bin/cue unsupported yet")

def main():

    try:
        prefix_name = sys.argv[1]
    except IndexError:
        print_usage()

    winebottles_dir = "/home/bmonkey/winebottles/"

    if prefix_name == "help":
        print_help()
    elif prefix_name == "unmount":
        subprocess.call(["sudo umount /mnt/cdrom"], shell=True)
        sys.exit(0)
    elif prefix_name == "list":
        call(["ls", winebottles_dir])
        sys.exit(0)

    bottle_dir = winebottles_dir + prefix_name

    if not os.path.exists(bottle_dir):
        sandbox(bottle_dir)

    try:
        command_name = sys.argv[2]
    except IndexError:
        print_usage()

    if command_name == "install":
        install(bottle_dir)
    elif command_name == "delete":
        delete(bottle_dir)
    elif command_name == "patch":
        patch(bottle_dir)

try:
    main()
except KeyboardInterrupt:
    pass
