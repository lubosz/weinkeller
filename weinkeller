#!/usr/bin/python

import subprocess, os
from weinkeller_lib import commands
import sys
import fnmatch

winebottles_dirs = [
      "/home/bmonkey/winebottles/",
      "/run/media/bmonkey/Stuff/winebottles/"]

def get_env(bottle_dir):
    wine_env = os.environ.copy()
    wine_env["WINEPREFIX"] = bottle_dir
    wine_env["WINEARCH"] = "win32"
    return wine_env

def get_env64(bottle_dir):
    wine_env = os.environ.copy()
    wine_env["WINEPREFIX"] = bottle_dir
    wine_env["WINEARCH"] = "win64"
    return wine_env

def call(command):
    print("calling", command)
    subprocess.Popen(command)


def call_wine(command, bottle_dir):
    print("calling", command)
    subprocess.call(command, shell=True, env=get_env(bottle_dir))

def call_wine64(command, bottle_dir):
    print("calling", command)
    subprocess.call(command, shell=True, env=get_env64(bottle_dir))

def sandbox(bottle_dir):
    call_wine("winetricks sandbox", bottle_dir)


def cfg(bottle_dir):
    call_wine("winecfg", bottle_dir)


def print_usage():
    print("Usage: weinkeller prefixname command")
    print("Try: weinkeller command help")
    print_help()


def print_help():
    print("Commands: install launch delete list kill export import ")
    sys.exit(0)


def find_files(file_name, folder):
    matches = []
    for root, dir_names, file_names in os.walk(folder):
        for filename in fnmatch.filter(file_names, file_name):
            matches.append(os.path.join(root, filename))

    return matches

import hashlib


def sha256(file_name):
    return hashlib.sha256(open(file_name, 'rb').read()).hexdigest()[:16]


def spacey(name, spaces):
    spaces -= len(name)
    space = ""
    for i in range(1, spaces):
        space += " "
    return name + space


def patch(bottle_dir):
    try:
        patches = sys.argv[3:]
    except IndexError:
        print("You need to supply a patched file to look for.")
        sys.exit(0)

    for patch_name in patches:
        full_path = os.path.join(os.getcwd(), patch_name)
        files = find_files(patch_name, bottle_dir + "/drive_c/")
        if files:
            print(spacey(patch_name, 30),
                  sha256(full_path), "=>",
                  sha256(files[0]),
                  files[0].replace(bottle_dir, ""))
            call(["cp", full_path, files[0]])


def delete(bottle_dir):
    call(["rm", bottle_dir, "-Rf"])


def print_exe_files(files):
    print("Supply a valid exe number")
    i = 0
    for file in files:
        print(i, file)
        i += 1
    sys.exit(0)


def launch(bottle_dir, is_64):
    exe_files = find_files("*.exe", bottle_dir+"/drive_c/") + \
                find_files("*.bat", bottle_dir+"/drive_c/")

    nice_files = []
    deletables = []

    black_list = ["drive_c/windows", "iexplore", "Program Files/Mono-"]

    deletable_list = ["installshield", "uninst", "setup", "installer", "unins", "vcredist"]

    for exe_file in exe_files:
        is_black = False
        is_deletable = False

        pretty_name = exe_file.replace(bottle_dir+"/drive_c/", "")

        for black in black_list:
            if black in exe_file:
                is_black = True

        if not is_black:
            for deletable in deletable_list:
                if deletable in exe_file.lower():
                    is_deletable = True
                    deletables.append(pretty_name)

            if not is_deletable:
                nice_files.append(pretty_name)

    if deletables:
        print("====")
        print("Maybe you can delete these files")
        print("====")
        for file in deletables:
            print(file)
        print("====")
        print()

    launch_id = 0
    try:
        launch_id = int(sys.argv[3])
    except IndexError:
        print_exe_files(nice_files)
    except ValueError:
        print_exe_files(nice_files)




    try:
        win_path = nice_files[launch_id].replace("/", "\\")

        bat_prefix = ""
        if win_path.endswith(".bat"):
            bat_prefix = "start"

        if is_64:
            call_wine64("wine %s 'C:\%s'" % (bat_prefix, win_path), bottle_dir)
        else:
            call_wine("wine %s 'C:\%s'" % (bat_prefix, win_path), bottle_dir)
    except IndexError:
        print_exe_files(nice_files)


def install(bottle_dir):
    try:
        file_name = sys.argv[3]
    except IndexError:
        print("You need to supply an install file.")
        sys.exit(0)

    full_path = os.path.join(os.getcwd(), file_name)

    if file_name[0] == '/':
        full_path = file_name

    if not os.path.exists(full_path):
        print(full_path, "does not exist")

    file_name = file_name.split("/")[-1]

    if ".exe" in file_name:
        print("Exe file")

        folder = full_path.replace(file_name, "")

        folder_device_path = os.path.join(bottle_dir + "/dosdevices/z:")

        print("Creating symlink into sandbox:", folder_device_path)
        if os.path.exists(folder_device_path):
            call(["rm", folder_device_path])
        call(["ln", "-s", folder, folder_device_path])

        wine_command = "wine 'Z:\%s'" % file_name
        call_wine(wine_command, bottle_dir)
    elif ".iso" in file_name:
        print("iso file")

        subprocess.call(["sudo umount /mnt/cdrom"], shell=True)
        subprocess.call(["sudo mount " + file_name + " /mnt/cdrom -o loop"], shell=True)

        if os.path.exists("/mnt/cdrom/Setup.exe"):
            call_wine("wine 'D:\Setup.exe'", bottle_dir)
        else:
            print("Please provide Setup.exe")
            call(["ls", "/mnt/cdrom"])

    elif ".msi" in file_name:
        call_wine("msiexec -i %s" % file_name, bottle_dir)
    elif ".bin" in file_name or ".cue" in file_name:
        print("bin/cue unsupported yet")


def all_bottles():
    bottles = []

    for winebottles_dir in winebottles_dirs:
        for prefix in os.listdir(winebottles_dir):
            if os.path.isdir(os.path.join(winebottles_dir, prefix)):
                bottles.append(prefix)

    bottles.sort()
    return bottles


def get_bottle_path(bottle):
    bottle_dir = winebottles_dirs[0] + bottle

    for winebottles_dir in winebottles_dirs:
        if os.path.exists(winebottles_dir + bottle):
            bottle_dir = winebottles_dir + bottle

    return bottle_dir


def is_sandbox(bottle):
    users_path = os.path.join(get_bottle_path(bottle), "drive_c/users/")

    sand_box = True
    if os.path.exists(users_path):
        for user in os.listdir(users_path):
            if user != "Public":
                desktop_path = os.path.join(users_path, user, "Desktop")
                if os.path.islink(desktop_path):
                    sand_box = False
    #else:
    #    print("\t total sandbox or different user folder")

    sand_box_string = ""
    if not sand_box:
        sand_box_string = "no sandbox!"

    print(bottle, sand_box_string)

    return sand_box


def check_sandboxes():
    for bottle in all_bottles():
        is_sandbox(bottle)


def main():
    try:
        command_name = sys.argv[1]
    except IndexError:
        print_usage()

    if command_name == "help":
        print_help()
    elif command_name == "unmount":
        subprocess.call(["sudo umount /mnt/cdrom"], shell=True)
        sys.exit(0)
    elif command_name == "check-sandboxes":
        check_sandboxes()
        sys.exit(0)
    elif command_name == "list":
        for winebottles_dir in winebottles_dirs:
            call(["ls", winebottles_dir])
        sys.exit(0)

    try:
        prefix_name = sys.argv[2]
    except IndexError:
        print_usage()

    bottle_dir = get_bottle_path(prefix_name)

    if not os.path.exists(bottle_dir):
        sandbox(bottle_dir)

    if not is_sandbox(prefix_name):
        sandbox(bottle_dir)

    if command_name == "install":
        install(bottle_dir)
    elif command_name == "delete":
        delete(bottle_dir)
    elif command_name == "patch":
        patch(bottle_dir)
    elif command_name == "launch":
        launch(bottle_dir, False)
    elif command_name == "launch64":
        launch(bottle_dir, True)
    elif command_name == "cfg":
        cfg(bottle_dir)
    elif command_name == "kill":
        call_wine("wineserver -k", bottle_dir)
    else:
        print("Unknown command", command_name)

try:
    main()
except KeyboardInterrupt:
    pass
